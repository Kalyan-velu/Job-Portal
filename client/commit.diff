diff --git a/client/src/components/nav-user.tsx b/client/src/components/nav-user.tsx
index 5b2bf2e..a9dcbcd 100644
--- a/client/src/components/nav-user.tsx
+++ b/client/src/components/nav-user.tsx
@@ -16,11 +16,16 @@ import {
   SidebarMenuItem,
   useSidebar,
 } from '@/components/ui/sidebar';
+import { logout } from '@/store/actions/auth.action';
+import { useAppDispatch } from '@/store/hooks';
 import { useGetUserQuery } from '@/store/services/user.service';
+import { useNavigate } from 'react-router-dom';
 
 export function NavUser() {
+  const navigate = useNavigate();
   const { isMobile } = useSidebar();
   const { data: user } = useGetUserQuery();
+  const dispatch = useAppDispatch();
   return (
     <SidebarMenu>
       <SidebarMenuItem>
@@ -92,7 +97,13 @@ export function NavUser() {
               </DropdownMenuItem>
             </DropdownMenuGroup>
             <DropdownMenuSeparator />
-            <DropdownMenuItem>
+            <DropdownMenuItem
+              onSelect={() => {
+                localStorage.removeItem('token');
+                dispatch(logout());
+                return navigate('/login');
+              }}
+            >
               <LogOut />
               Log out
             </DropdownMenuItem>
diff --git a/client/src/providers/auth-provider.tsx b/client/src/providers/auth-provider.tsx
index 9065d33..e80891c 100644
--- a/client/src/providers/auth-provider.tsx
+++ b/client/src/providers/auth-provider.tsx
@@ -14,10 +14,10 @@ export const AuthProvider = ({ children }: { children: ReactNode }) => {
   } = useGetUserQuery(); // Fetch user data
   const navigate = useNavigate(); // Get the navigate function
 
-  const isAuthenticated = isSuccess && !user; // Check if user is logged in
+  const isAuthenticated = !!user; // Check if user is logged in
 
-  // Optional: Handle loading and error states
-  if (isLoading) return <div>Loading...</div>; // Show loading state
+  // // Optional: Handle loading and error states
+  // if (isLoading) return <div>Loading...</div>; // Show loading state
 
   return (
     <AuthContext.Provider value={{ user, isAuthenticated }}>
diff --git a/client/src/store/actions/auth.action.tsx b/client/src/store/actions/auth.action.tsx
new file mode 100644
index 0000000..22f84f2
--- /dev/null
+++ b/client/src/store/actions/auth.action.tsx
@@ -0,0 +1,3 @@
+import { createAction } from '@reduxjs/toolkit';
+
+export const logout = createAction('auth/logout');
diff --git a/client/src/store/index.ts b/client/src/store/index.ts
index 9dd579a..4f6c6dc 100644
--- a/client/src/store/index.ts
+++ b/client/src/store/index.ts
@@ -16,7 +16,7 @@ const rootReducer = combineReducers({
 });
 
 const appReducer = (state: any, action: UnknownAction) => {
-  if (action.type === 'user/logout') {
+  if (action.type === 'auth/logout') {
     state = undefined;
   }
   return rootReducer(state, action);
